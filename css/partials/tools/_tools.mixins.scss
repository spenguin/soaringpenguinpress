/**
	Mixins
*/

@mixin fa-icon() {
	display: inline-block;
	font: normal normal normal #{$fa-font-size-base}/#{$fa-line-height-base} FontAwesome; // shortening font declaration
	font-size: inherit; // can't have font-size inherit on line above, so need to override
	text-rendering: auto; // optimizelegibility throws things off #1094
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;

}

@mixin fa-icon-rotate($degrees, $rotation) {
	-ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=#{$rotation})";
	-webkit-transform: rotate($degrees);
			-ms-transform: rotate($degrees);
					transform: rotate($degrees);
}

@mixin fa-icon-flip($horiz, $vert, $rotation) {
	-ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=#{$rotation}, mirror=1)";
	-webkit-transform: scale($horiz, $vert);
			-ms-transform: scale($horiz, $vert);
					transform: scale($horiz, $vert);
}


// Only display content to screen readers. A la Bootstrap 4.
//
// See: http://a11yproject.com/posts/how-to-hide-content/

@mixin sr-only {
	position: absolute;
	width: 1px;
	height: 1px;
	padding: 0;
	margin: -1px;
	overflow: hidden;
	clip: rect(0,0,0,0);
	border: 0;
}

// Use in conjunction with .sr-only to only display content when it's focused.
//
// Useful for "Skip to main content" links; see http://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1
//
// Credit: HTML5 Boilerplate

@mixin sr-only-focusable {
	&:active,
	&:focus {
		position: static;
		width: auto;
		height: auto;
		margin: 0;
		overflow: visible;
		clip: auto;
	}
}


@mixin transition($transition-property, $transition-time, $method) {
	-webkit-transition: $transition-property $transition-time $method;
	-moz-transition: $transition-property $transition-time $method;
	-ms-transition: $transition-property $transition-time $method;
	-o-transition: $transition-property $transition-time $method;
	transition: $transition-property $transition-time $method;
}
/* Usage - Stick into the top of your SCSS sheet and @include where needed for cross browser transitions. 

.class {
		 @include transition($transition-property, $transition-time, $method);
}

$transition-property = the property you want to transition
$transition-time = seconds you want the transition to last
$method = how you want it to transition - e.g. ease-in-out

Usage example;

-------------

.item {
		@include transition(padding, 1s, ease-in-out);
}

-------------

*/

/**
	Calculate the width of <main> based on the aside and gutter widths
*/
@mixin main-width-calc( $gutter, $aside-width )
{
	/* Firefox */
	width: -moz-calc( 100% - #{$gutter} - #{$aside-width} );
	/* WebKit */
	width: -webkit-calc( 100% - #{$gutter} - #{$aside-width} );
	/* Opera */
	width: -o-calc( 100% - #{$gutter} - #{$aside-width} );
	/* Standard */
	width: calc( 100% - #{$gutter} - #{$aside-width} );
}


/**
	Set of mixins from https://gist.github.com/garyharan/957284
*/


@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

@mixin text-field {
 display: inline-block;
  outline: none;
  text-decoration: none;
  font: 14px/100% Arial, Helvetica, sans-serif;
  padding: .5em;
  text-shadow: 0 1px 1px rgba(0,0,0,.3);
  @include rounded();
  @include box-shadow(0, 1px, 2px, rgba(0, 0, 0, 0.2));
}

@mixin button($color: $red, $text_color: $white) {
  display: inline-block;
  outline: none;
  cursor: pointer;
  text-align: center;
  text-decoration: none;
  font: 14px/100% Arial, Helvetica, sans-serif;
  padding: .5em 2em .55em;
  text-shadow: 0 1px 1px rgba(0,0,0,.3);
  @include rounded();
  @include box-shadow(0, 1px, 2px, rgba(0, 0, 0, 0.2));

  color: $text_color !important;
  font-weight: bold;
  border: solid 1px darken($color, 18%);
  background: $color;
  @include gradient(saturate($color, 15%), darken($color, 15%));

  &:hover {
    text-decoration: none;
    background: saturate($color, 10%);
    @include gradient(saturate($color, 5%), darken($color, 5%));
  }

  &:active {
    position: relative;
    top: 1px;
    color: saturate($color, 15%);
    @include gradient(saturate($color, 15%), lighten($color, 15%));
  }
}

@mixin rounded($radius: 0.5em) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}

@mixin gradient($from, $to) {
  background: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
  background: -moz-linear-gradient(top,  $from, $to);
  filter:  progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$from}', endColorstr='#{$to}');
}


@mixin fluid-width( $min-width, $max-width, $break-start, $break-end )
{
	/**
		Calculations
	*/

	$m:	( strip-unit( $max-width )  - strip-unit( $min-width ) ) / (strip-unit( $break-end ) - strip-unit( $break-start ) );

	$b:	#{ strip-unit( $min-width ) - $m * strip-unit( $break-start ) };

	$mx:	#{$m * 100 };

	/**
		Output
	*/
	width: $max-width;

	@media ( min-width: #{$break-start} ) {
		width: percentage (#{$mx} + #{$b} );
	}

	@media ( min-width: #{$break-end} ) {
		width: $min-width;
	}
}